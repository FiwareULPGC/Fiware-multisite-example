# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
notifyFormat_ngsi10

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart

--SHELL--

#
# 01. Update/APPEND E1/T1/A1='JSON-JSON'
# 02. Update/APPEND E1/T1/A2='JSON-XML'
# 03. Update/APPEND E1/T1/A3='XML-XML'
# 04. Update/APPEND E1/T1/A4='XML-JSON'
# 05. Subscribe to E1/A1 in JSON (default notifyFormat is JSON)
# 06. Subscribe to E1/A2 in JSON (with notifyFormat=XML)
# 07. Subscribe to E1/A3 in XML (default notifyFormat is XML)
# 08. Subscribe to E1/A4 in XML (with notifyFormat=JSON)
# 09. Dump accumulator, see A1 in JSON, A2 in XML, A3 in XML and A4 in JSON
#

echo "01. Update/APPEND E1/T1/A1='JSON-JSON'"
echo "======================================"
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A1",
          "type": "string",
          "value": "JSON-JSON"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --json
echo
echo


echo "02. Update/APPEND E1/T1/A2='JSON-XML'"
echo "====================================="
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A2",
          "type": "string",
          "value": "JSON-XML"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --json
echo
echo


echo "03. Update/APPEND E1/T1/A3='XML-XML'"
echo "===================================="
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A3",
          "type": "string",
          "value": "XML-XML"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --json
echo
echo


echo "04. Update/APPEND E1/T1/A4='XML-JSON'"
echo "===================================="
payload='{
  "contextElements": [
    {
      "type": "T1",
      "id":   "E1",
      "attributes": [
        {
          "name": "A4",
          "type": "string",
          "value": "XML-JSON"
        }
      ]
    }
  ],
  "updateAction": "APPEND"
}'
orionCurl --url /v1/updateContext --payload "$payload" --json
echo
echo


echo "05. Subscribe to E1/A1 in JSON (default notifyFormat is JSON)"
echo "============================================================="
payload='{
  "entities": [
    {
        "id":   "E1",
        "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ],
  "reference": "http://localhost:'${LISTENER_PORT}'/notify",
  "duration": "P1M",
  "throttling": "PT1S",
  "notifyConditions": [
    {
        "type": "ONCHANGE",
        "condValues": [
            "A1"
        ]
    }
  ]
}'
orionCurl --url /v1/subscribeContext --payload "$payload" --json
echo
echo


echo "06. Subscribe to E1/A2 in JSON (with notifyFormat=XML)"
echo "======================================================="
payload='{
  "entities": [
    {
        "id":   "E1",
        "type": "T1"
    }
  ],
  "attributes": [
    "A2"
  ],
  "reference": "http://localhost:'${LISTENER_PORT}'/notify",
  "duration": "P1M",
  "throttling": "PT1S",
  "notifyConditions": [
    {
        "type": "ONCHANGE",
        "condValues": [
            "A2"
        ]
    }
  ]
}'
orionCurl --url /v1/subscribeContext?notifyFormat=XML --payload "$payload" --json
echo
echo


echo "07. Subscribe to E1/A3 in XML (default notifyFormat is XML)"
echo "==========================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
<subscribeContextRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>   
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A3</attribute>
  </attributeList>
  <reference>http://localhost:'${LISTENER_PORT}'/notify</reference>
  <duration>P5Y</duration>
  <notifyConditions>
    <notifyCondition>
      <type>ONCHANGE</type>
      <condValueList>
        <condValue>A3</condValue>
      </condValueList>
      <restriction>restriction</restriction>
    </notifyCondition>
  </notifyConditions>
  <throttling>PT1S</throttling>
</subscribeContextRequest>'
orionCurl --url /v1/subscribeContext --payload "$payload"
echo
echo


echo "08. Subscribe to E1/A4 in XML (with notifyFormat=JSON)"
echo "======================================================"
payload='<?xml version="1.0" encoding="UTF-8"?>
<subscribeContextRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>   
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A4</attribute>
  </attributeList>
  <reference>http://localhost:'${LISTENER_PORT}'/notify</reference>
  <duration>P5Y</duration>
  <notifyConditions>
    <notifyCondition>
      <type>ONCHANGE</type>
      <condValueList>
        <condValue>A4</condValue>
      </condValueList>
      <restriction>restriction</restriction>
    </notifyCondition>
  </notifyConditions>
  <throttling>PT1S</throttling>
</subscribeContextRequest>'
orionCurl --url /v1/subscribeContext?notifyFormat=JSON --payload "$payload"
echo
echo


echo "09. Dump accumulator, see A1 in JSON, A2 in XML, A3 in XML and A4 in JSON"
echo "========================================================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Update/APPEND E1/T1/A1='JSON-JSON'
======================================
HTTP/1.1 200 OK
Content-Length: 383
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A1", 
                        "type": "string", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


02. Update/APPEND E1/T1/A2='JSON-XML'
=====================================
HTTP/1.1 200 OK
Content-Length: 383
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A2", 
                        "type": "string", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


03. Update/APPEND E1/T1/A3='XML-XML'
====================================
HTTP/1.1 200 OK
Content-Length: 383
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A3", 
                        "type": "string", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


04. Update/APPEND E1/T1/A4='XML-JSON'
====================================
HTTP/1.1 200 OK
Content-Length: 383
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "A4", 
                        "type": "string", 
                        "value": ""
                    }
                ], 
                "id": "E1", 
                "isPattern": "false", 
                "type": "T1"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


05. Subscribe to E1/A1 in JSON (default notifyFormat is JSON)
=============================================================
HTTP/1.1 200 OK
Content-Length: 135
Content-Type: application/json
Date: REGEX(.*)

{
    "subscribeResponse": {
        "duration": "P1M", 
        "subscriptionId": "REGEX([0-9a-f]{24})", 
        "throttling": "PT1S"
    }
}


06. Subscribe to E1/A2 in JSON (with notifyFormat=XML)
=======================================================
HTTP/1.1 200 OK
Content-Length: 135
Content-Type: application/json
Date: REGEX(.*)

{
    "subscribeResponse": {
        "duration": "P1M", 
        "subscriptionId": "REGEX([0-9a-f]{24})", 
        "throttling": "PT1S"
    }
}


07. Subscribe to E1/A3 in XML (default notifyFormat is XML)
===========================================================
HTTP/1.1 200 OK
Content-Length: 225
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<subscribeContextResponse>
  <subscribeResponse>
    <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
    <duration>P5Y</duration>
    <throttling>PT1S</throttling>
  </subscribeResponse>
</subscribeContextResponse>


08. Subscribe to E1/A4 in XML (with notifyFormat=JSON)
======================================================
HTTP/1.1 200 OK
Content-Length: 225
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<subscribeContextResponse>
  <subscribeResponse>
    <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
    <duration>P5Y</duration>
    <throttling>PT1S</throttling>
  </subscribeResponse>
</subscribeContextResponse>


09. Dump accumulator, see A1 in JSON, A2 in XML, A3 in XML and A4 in JSON
=========================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 471
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/json

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "originator" : "localhost",
  "contextResponses" : [
    {
      "contextElement" : {
        "type" : "T1",
        "isPattern" : "false",
        "id" : "E1",
        "attributes" : [
          {
            "name" : "A1",
            "type" : "string",
            "value" : "JSON-JSON"
          }
        ]
      },
      "statusCode" : {
        "code" : "200",
        "reasonPhrase" : "OK"
      }
    }
  ]
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 724
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="T1" isPattern="false">
          <id>E1</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>A2</name>
            <type>string</type>
            <contextValue>JSON-XML</contextValue>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</notifyContextRequest>
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 723
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="T1" isPattern="false">
          <id>E1</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>A3</name>
            <type>string</type>
            <contextValue>XML-XML</contextValue>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</notifyContextRequest>
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 470
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/json

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "originator" : "localhost",
  "contextResponses" : [
    {
      "contextElement" : {
        "type" : "T1",
        "isPattern" : "false",
        "id" : "E1",
        "attributes" : [
          {
            "name" : "A4",
            "type" : "string",
            "value" : "XML-JSON"
          }
        ]
      },
      "statusCode" : {
        "code" : "200",
        "reasonPhrase" : "OK"
      }
    }
  ]
}
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
