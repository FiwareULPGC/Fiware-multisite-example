# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
notifyFormat_ngsi9

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart

--SHELL--

#
# 01. Register E1/T1/A1
# 02. Register E1/T1/A2
# 03. Register E1/T1/A3
# 04. Register E1/T1/A4
# 05. Availability-Subscribe to E1/A1 in JSON (default notifyFormat is JSON)
# 06. Availability-Subscribe to E1/A2 in JSON (with notifyFormat=XML)
# 07. Availability-Subscribe to E1/A3 in XML (default notifyFormat is XML)
# 08. Availability-Subscribe to E1/A4 in XML (with notifyFormat=JSON)
# 09. Dump accumulator, see A1 in JSON, A2 in XML, A3 in XML and A4 in JSON
#

echo "01. Register E1/T1/A1"
echo "====================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A1",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "02. Register E1/T1/A2"
echo "====================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A2",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "03. Register E1/T1/A3"
echo "====================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A3",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "04. Register E1/T1/A4"
echo "====================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "id":   "E1",
         "type": "T1"
      }
    ],
    "attributes": [
      {
        "name": "A4",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/notify"
    }
 ],
 "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "05. Availability-Subscribe to E1/A1 in JSON (default notifyFormat is JSON)"
echo "=========================================================================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ], 
  "reference": "http://localhost:'${LISTENER_PORT}'/notify",
  "duration": "P1M"
}'
orionCurl --url /v1/registry/subscribeContextAvailability --payload "$payload" --json
echo
echo


echo "06. Availability-Subscribe to E1/A2 in JSON (with notifyFormat=XML)"
echo "==================================================================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A2"
  ], 
  "reference": "http://localhost:'${LISTENER_PORT}'/notify",
  "duration": "P1M"
}'
orionCurl --url /v1/registry/subscribeContextAvailability?notifyFormat=XML --payload "$payload" --json
echo
echo


echo "07. Availability-Subscribe to E1/A3 in XML (default notifyFormat is XML)"
echo "========================================================================"
payload='<?xml version="1.0"?>
<subscribeContextAvailabilityRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A3</attribute>
  </attributeList>
  <reference>http://localhost:'${LISTENER_PORT}'/notify</reference>
  <duration>P1M</duration>
</subscribeContextAvailabilityRequest>'
orionCurl --url /v1/registry/subscribeContextAvailability --payload "${payload}"
echo
echo


echo "08. Availability-Subscribe to E1/A4 in XML (with notifyFormat=JSON)"
echo "==================================================================="
payload='<?xml version="1.0"?>
<subscribeContextAvailabilityRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A4</attribute>
  </attributeList>
  <reference>http://localhost:'${LISTENER_PORT}'/notify</reference>
  <duration>P1M</duration>
</subscribeContextAvailabilityRequest>'
orionCurl --url /v1/registry/subscribeContextAvailability?notifyFormat=JSON --payload "${payload}"
echo
echo


echo "09. Dump accumulator, see A1 in JSON, A2 in XML, A3 in XML and A4 in JSON"
echo "========================================================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Register E1/T1/A1
=====================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


02. Register E1/T1/A2
=====================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


03. Register E1/T1/A3
=====================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


04. Register E1/T1/A4
=====================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


05. Availability-Subscribe to E1/A1 in JSON (default notifyFormat is JSON)
==========================================================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "subscriptionId": "REGEX([0-9a-f]{24})"
}


06. Availability-Subscribe to E1/A2 in JSON (with notifyFormat=XML)
===================================================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "subscriptionId": "REGEX([0-9a-f]{24})"
}


07. Availability-Subscribe to E1/A3 in XML (default notifyFormat is XML)
========================================================================
HTTP/1.1 200 OK
Content-Length: 166
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<subscribeContextAvailabilityResponse>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <duration>P1M</duration>
</subscribeContextAvailabilityResponse>


08. Availability-Subscribe to E1/A4 in XML (with notifyFormat=JSON)
===================================================================
HTTP/1.1 200 OK
Content-Length: 166
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<subscribeContextAvailabilityResponse>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <duration>P1M</duration>
</subscribeContextAvailabilityResponse>


09. Dump accumulator, see A1 in JSON, A2 in XML, A3 in XML and A4 in JSON
=========================================================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 505
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/json

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "contextRegistrationResponses" : [
    {
      "contextRegistration" : {
        "entities" : [
          {
            "type" : "T1",
            "isPattern" : "false",
            "id" : "E1"
          }
        ],
        "attributes" : [
          {
            "name" : "A1",
            "type" : "string",
            "isDomain" : "false"
          }
        ],
        "providingApplication" : "http://localhost:9997/notify"
      }
    }
  ]
}
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 823
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/xml

<notifyContextAvailabilityRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="T1" isPattern="false">
            <id>E1</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>A2</name>
            <type>string</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:9997/notify</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</notifyContextAvailabilityRequest>
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 823
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/xml

<notifyContextAvailabilityRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="T1" isPattern="false">
            <id>E1</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>A3</name>
            <type>string</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:9997/notify</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</notifyContextAvailabilityRequest>
=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 505
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/json

{
  "subscriptionId" : "REGEX([0-9a-f]{24})",
  "contextRegistrationResponses" : [
    {
      "contextRegistration" : {
        "entities" : [
          {
            "type" : "T1",
            "isPattern" : "false",
            "id" : "E1"
          }
        ],
        "attributes" : [
          {
            "name" : "A4",
            "type" : "string",
            "isDomain" : "false"
          }
        ],
        "providingApplication" : "http://localhost:9997/notify"
      }
    }
  ]
}
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
