# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Query Forward In JSON

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart

--SHELL--

#
# 01. Register E1/T1/A1 in CB, accumulator as CP, in XML and with notifyFormat set to JSON
# 02. Register E1/T1/A2 in CB, accumulator as CP, in JSON
# 03. Query E1/T1/A1 in CB, using XML - forwarded to accumulator in JSON
# 04. Query E1/T1/A1 in CB, using JSON - forwarded to accumulator in JSON
# 05. Dump accumulator - see two Queries in JSON
#

echo "01. Register E1/T1/A1 in CB, accumulator as CP, in XML and with notifyFormat set to JSON"
echo "========================================================================================"
payload='<?xml version="1.0"?>
<registerContextRequest>
  <contextRegistrationList>
    <contextRegistration>
      <entityIdList>
        <entityId type="T1" isPattern="false">
          <id>E1</id>      
        </entityId>
      </entityIdList>
      <contextRegistrationAttributeList>
        <contextRegistrationAttribute>
          <name>A1</name>
          <isDomain>false</isDomain>
        </contextRegistrationAttribute>
      </contextRegistrationAttributeList>
      <providingApplication>http://localhost:'${LISTENER_PORT}'/v1</providingApplication>
    </contextRegistration>
  </contextRegistrationList>
  <duration>PT1H</duration>
  <registrationId></registrationId>
</registerContextRequest>'
orionCurl --url /v1/registry/registerContext?notifyFormat=JSON --payload "$payload"
echo
echo


echo "02. Register E1/T1/A2 in CB, accumulator as CP, in JSON"
echo "======================================================="
payload='{
  "contextRegistrations": [
  {
    "entities": [
      {
         "type": "T1",
         "isPattern": "false",
         "id": "E1"
      }
    ],
    "attributes": [
      {
        "name": "A2",
        "type": "string",
        "isDomain": "false"
      }
    ],
    "providingApplication": "http://localhost:'${LISTENER_PORT}'/v1"
    }
  ],
  "duration": "P1M"
}'
orionCurl --url /v1/registry/registerContext --payload "$payload" --json
echo
echo


echo "03. Query E1/T1/A1 in CB, using XML - forwarded to accumulator in JSON"
echo "======================================================================"
payload='<?xml version="1.0"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="T1" isPattern="false">
      <id>E1</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A1</attribute>
  </attributeList>
</queryContextRequest>'
orionCurl --url /v1/queryContext --payload "$payload"
echo
echo


echo "04. Query E1/T1/A1 in CB, using JSON - forwarded to accumulator in JSON"
echo "======================================================================="
payload='{
  "entities": [
    {
      "id":   "E1",
      "type": "T1"
    }
  ],
  "attributes": [
    "A1"
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload" --json
echo
echo


echo "05. Dump accumulator - see two Queries in JSON"
echo "=============================================="
accumulatorDump
echo
echo


--REGEXPECT--
01. Register E1/T1/A1 in CB, accumulator as CP, in XML and with notifyFormat set to JSON
========================================================================================
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT1H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>


02. Register E1/T1/A2 in CB, accumulator as CP, in JSON
=======================================================
HTTP/1.1 200 OK
Content-Length: 74
Content-Type: application/json
Date: REGEX(.*)

{
    "duration": "P1M", 
    "registrationId": "REGEX([0-9a-f]{24})"
}


03. Query E1/T1/A1 in CB, using XML - forwarded to accumulator in JSON
======================================================================
HTTP/1.1 200 OK
Content-Length: 212
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
    <details>invalid context provider response</details>
  </errorCode>
</queryContextResponse>


04. Query E1/T1/A1 in CB, using JSON - forwarded to accumulator in JSON
=======================================================================
HTTP/1.1 200 OK
Content-Length: 147
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404", 
        "details": "invalid context provider response", 
        "reasonPhrase": "No context element found"
    }
}


05. Dump accumulator - see two Queries in JSON
==============================================
POST http://localhost:REGEX(\d+)/v1/queryContext
Content-Length: 138
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json

{
  "entities" : [
    {
      "type" : "T1",
      "isPattern" : "false",
      "id" : "E1"
    }
  ],
  "attributes" : [
    "A1"
  ]
}
=======================================
POST http://localhost:REGEX(\d+)/v1/queryContext
Content-Length: 138
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: localhost:REGEX(\d+)
Accept: application/json
Content-Type: application/json

{
  "entities" : [
    {
      "type" : "T1",
      "isPattern" : "false",
      "id" : "E1"
    }
  ],
  "attributes" : [
    "A1"
  ]
}
=======================================


--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
