# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Attribute Compound Value parsing for PUT /v1/contextEntities/entityId (updateContextElementRequest)

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# Just one request needed here to make dure the broker doesn't crash when receiving
# a compound attribute value for "PUT /v1/contextEntities/entityId":
#
# 01. PUT /v1/contextEntities/entityId with compound attribute value using JSON
# 02. PUT /v1/contextEntities/entityId with compound attribute value using XML
#
# However, to see 'good' results, the entity should exist:
#
# 03. POST /v1/contextEntities/entityId with compound attribute value using JSON
# 04. POST /v1/contextEntities/entityId with compound attribute value using XML
#
# Now we try PUT again (and GET to assure it's working):
#
# 05. PUT /v1/contextEntities/entityId with compound attribute value using JSON
# 06. GET /v1/contextEntities/entityId with compound attribute value using JSON
# 07. PUT /v1/contextEntities/entityId with compound attribute value using XML
# 08. GET /v1/contextEntities/entityId with compound attribute value using XML
#
#
#

echo "01. PUT /v1/contextEntities/entityId with compound attribute value using JSON"
echo "============================================================================="
payload='{
  "attributes": [
    {
        "name": "sdf",
        "type": "",
        "value": {"a": 1}
    }
  ]
}'
orionCurl --url /v1/contextEntities/entityId -X PUT --payload "$payload" --json
echo
echo


echo "02. PUT /v1/contextEntities/entityId with compound attribute value using XML"
echo "============================================================================"
payload='<?xml version="1.0" encoding="UTF-8"?>
<updateContextElementRequest>
  <contextAttributeList>
    <contextAttribute>
      <name>sdf</name>
      <type></type>
      <contextValue>
        <a>1</a>
      </contextValue>
    </contextAttribute>
  </contextAttributeList>
</updateContextElementRequest>'
orionCurl --url /v1/contextEntities/entityId -X PUT --payload "$payload"
echo
echo


echo "03. POST /v1/contextEntities/entityId with compound attribute value using JSON"
echo "=============================================================================="
payload='{
  "attributes": [
    {
        "name": "sdf",
        "type": "",
        "value": {"a": 1}
    }
  ]
}'
orionCurl --url /v1/contextEntities/entityId --payload "$payload" --json
echo
echo


echo "04. POST /v1/contextEntities/entityId with compound attribute value using XML"
echo "============================================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
<appendContextElementRequest>
  <contextAttributeList>
    <contextAttribute>
      <name>sdf</name>
      <type></type>
      <contextValue>
        <a>2</a>
      </contextValue>
    </contextAttribute>
  </contextAttributeList>
</appendContextElementRequest>'
orionCurl --url /v1/contextEntities/entityId --payload "$payload"
echo
echo


echo "05. PUT /v1/contextEntities/entityId with compound attribute value using JSON"
echo "============================================================================="
payload='{
  "attributes": [
    {
        "name": "sdf",
        "type": "",
        "value": {"a": 5}
    }
  ]
}'
orionCurl --url /v1/contextEntities/entityId -X PUT --payload "$payload" --json
echo
echo


echo "06. GET /v1/contextEntities/entityId with compound attribute value using JSON"
echo "============================================================================="
orionCurl --url /v1/contextEntities/entityId --json
echo
echo


echo "07. PUT /v1/contextEntities/entityId with compound attribute value using XML"
echo "============================================================================"
payload='<?xml version="1.0" encoding="UTF-8"?>
<updateContextElementRequest>
  <contextAttributeList>
    <contextAttribute>
      <name>sdf</name>
      <type></type>
      <contextValue>
        <a>7</a>
      </contextValue>
    </contextAttribute>
  </contextAttributeList>
</updateContextElementRequest>'
orionCurl --url /v1/contextEntities/entityId -X PUT --payload "$payload"
echo
echo


echo "08. GET /v1/contextEntities/entityId with compound attribute value using XML"
echo "============================================================================"
orionCurl --url /v1/contextEntities/entityId
echo
echo


--REGEXPECT--
01. PUT /v1/contextEntities/entityId with compound attribute value using JSON
=============================================================================
HTTP/1.1 200 OK
Content-Length: 122
Content-Type: application/json
Date: REGEX(.*)

{
    "errorCode": {
        "code": "404", 
        "details": "entityId", 
        "reasonPhrase": "No context element found"
    }
}


02. PUT /v1/contextEntities/entityId with compound attribute value using XML
============================================================================
HTTP/1.1 200 OK
Content-Length: 203
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextElementResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
    <details>entityId</details>
  </errorCode>
</updateContextElementResponse>


03. POST /v1/contextEntities/entityId with compound attribute value using JSON
==============================================================================
HTTP/1.1 200 OK
Content-Length: 315
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "sdf", 
                    "type": "", 
                    "value": ""
                }
            ], 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ], 
    "id": "entityId", 
    "isPattern": "false", 
    "type": ""
}


04. POST /v1/contextEntities/entityId with compound attribute value using XML
=============================================================================
HTTP/1.1 200 OK
Content-Length: 559
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<appendContextElementResponse>
  <entityId type="" isPattern="false">
    <id>entityId</id>
  </entityId>
  <contextResponseList>
    <contextAttributeResponse>
      <contextAttributeList>
        <contextAttribute>
          <name>sdf</name>
          <type/>
          <contextValue/>
        </contextAttribute>
      </contextAttributeList>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextAttributeResponse>
  </contextResponseList>
</appendContextElementResponse>


05. PUT /v1/contextEntities/entityId with compound attribute value using JSON
=============================================================================
HTTP/1.1 200 OK
Content-Length: 254
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "attributes": [
                {
                    "name": "sdf", 
                    "type": "", 
                    "value": ""
                }
            ], 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


06. GET /v1/contextEntities/entityId with compound attribute value using JSON
=============================================================================
HTTP/1.1 200 OK
Content-Length: 306
Content-Type: application/json
Date: REGEX(.*)

{
    "contextElement": {
        "attributes": [
            {
                "name": "sdf", 
                "type": "", 
                "value": {
                    "a": "5"
                }
            }
        ], 
        "id": "entityId", 
        "isPattern": "false", 
        "type": ""
    }, 
    "statusCode": {
        "code": "200", 
        "reasonPhrase": "OK"
    }
}


07. PUT /v1/contextEntities/entityId with compound attribute value using XML
============================================================================
HTTP/1.1 200 OK
Content-Length: 484
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextElementResponse>
  <contextResponseList>
    <contextAttributeResponse>
      <contextAttributeList>
        <contextAttribute>
          <name>sdf</name>
          <type/>
          <contextValue/>
        </contextAttribute>
      </contextAttributeList>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextAttributeResponse>
  </contextResponseList>
</updateContextElementResponse>


08. GET /v1/contextEntities/entityId with compound attribute value using XML
============================================================================
HTTP/1.1 200 OK
Content-Length: 478
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<contextElementResponse>
  <contextElement>
    <entityId type="" isPattern="false">
      <id>entityId</id>
    </entityId>
    <contextAttributeList>
      <contextAttribute>
        <name>sdf</name>
        <type/>
        <contextValue>
          <a>7</a>
        </contextValue>
      </contextAttribute>
    </contextAttributeList>
  </contextElement>
  <statusCode>
    <code>200</code>
    <reasonPhrase>OK</reasonPhrase>
  </statusCode>
</contextElementResponse>


--TEARDOWN--
brokerStop CB
dbDrop CB
