# Copyright 2014 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Attribute Compound Value parsing for POST /v1/updateContext

--SHELL-INIT--
dbInit CB
brokerStart CB

--SHELL--

#
# Standard operation /v1/updateContext with compound attribute values:
#
# 01. POST /v1/updateContext with compound attribute value <a>1</a> in XML
# 02. POST /v1/queryContext to see the compound in XML
# 03. POST /v1/updateContext with compound attribute value { "a": "3" } in JSON
# 04. POST /v1/queryContext to see the compound in JSON
#

echo "01. POST /v1/updateContext with compound attribute value <a>1</a> in XML"
echo "========================================================================"
payload='<?xml version="1.0" encoding="UTF-8"?>
<updateContextRequest>
  <contextElementList>
    <contextElement>
      <entityId type="T" isPattern="false">
        <id>E</id>
      </entityId>
      <contextAttributeList>
        <contextAttribute>
          <name>att</name>
          <type>compound</type>
          <contextValue>
            <a>1</a>
          </contextValue>
        </contextAttribute>
      </contextAttributeList>
    </contextElement>
  </contextElementList>
  <updateAction>APPEND</updateAction>
</updateContextRequest>'
orionCurl --url /v1/updateContext --payload "$payload"
echo
echo


echo "02. GET  /v1/queryContext to see the compound in XML"
echo "===================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
<queryContextRequest>
  <entityIdList>
    <entityId type="T" isPattern="false">
      <id>E</id>
    </entityId>
  </entityIdList>
  <attributeList/>
</queryContextRequest>'
orionCurl --url /v1/queryContext --payload "$payload"
echo
echo


echo "03. POST /v1/updateContext with compound attribute value { \"a\": \"3\" } in JSON"
echo "========================================================================="
payload='{
  "contextElements": [
    {
      "type": "T",
      "id":   "E",
      "attributes": [
        {
          "name": "att",
          "type": "compound",
          "value": {
            "a": "3"
          }
        }
      ]
    }
  ],
  "updateAction": "UPDATE"
}'
orionCurl --url /v1/updateContext --payload "$payload" --json
echo
echo


echo "04. GET  /v1/queryContext to see the compound in JSON"
echo "====================================================="
payload='{
  "entities": [
    {
      "id":   "E",
      "type": "T"
    }
  ]
}'
orionCurl --url /v1/queryContext --payload "$payload" --json
echo
echo


--REGEXPECT--
01. POST /v1/updateContext with compound attribute value <a>1</a> in XML
========================================================================
HTTP/1.1 200 OK
Content-Length: 622
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextResponse>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="T" isPattern="false">
          <id>E</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>att</name>
            <type>compound</type>
            <contextValue/>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</updateContextResponse>


02. GET  /v1/queryContext to see the compound in XML
====================================================
HTTP/1.1 200 OK
Content-Length: 656
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<queryContextResponse>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="T" isPattern="false">
          <id>E</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>att</name>
            <type>compound</type>
            <contextValue>
              <a>1</a>
            </contextValue>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</queryContextResponse>


03. POST /v1/updateContext with compound attribute value { "a": "3" } in JSON
=========================================================================
HTTP/1.1 200 OK
Content-Length: 384
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "att", 
                        "type": "compound", 
                        "value": ""
                    }
                ], 
                "id": "E", 
                "isPattern": "false", 
                "type": "T"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


04. GET  /v1/queryContext to see the compound in JSON
=====================================================
HTTP/1.1 200 OK
Content-Length: 421
Content-Type: application/json
Date: REGEX(.*)

{
    "contextResponses": [
        {
            "contextElement": {
                "attributes": [
                    {
                        "name": "att", 
                        "type": "compound", 
                        "value": {
                            "a": "3"
                        }
                    }
                ], 
                "id": "E", 
                "isPattern": "false", 
                "type": "T"
            }, 
            "statusCode": {
                "code": "200", 
                "reasonPhrase": "OK"
            }
        }
    ]
}


--TEARDOWN--
brokerStop CB
dbDrop CB
