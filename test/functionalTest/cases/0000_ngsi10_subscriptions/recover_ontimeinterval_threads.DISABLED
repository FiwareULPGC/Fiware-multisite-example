# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

--NAME--
Recover ONINTERVAL threads
--SHELL-INIT--
# Test to see if we have the listening application running on ${LISTENER_PORT} if so kill it!
running_app=$(ps -fe | grep accumulator-server | grep ${LISTENER_PORT} | wc -l)
if [ $running_app -ne 0 ]; then
  kill $(ps -fe | grep accumulator-server | grep ${LISTENER_PORT} | awk '{print $2}')
  # Wait some time so the accumulator can finish properly
  sleep 1
  running_app=$(ps -fe | grep accumulator-server | grep ${LISTENER_PORT} | wc -l)
  if [ $running_app -ne 0 ]; then
    # If the accumulator refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep accumulator-server | grep ${LISTENER_PORT} | awk '{print $2}')
    sleep 1
    running_app=$(ps -fe | grep accumulator-server | grep ${LISTENER_PORT} | wc -l)
    if [ $running_app -ne 0 ]; then
      echo "Existing accumulator-server.py is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

accumulator-server.py ${LISTENER_PORT} /notify &
# Wait until accumulator has started or we have waited a given maximum time
port_not_ok=1
time=0
until [ $port_not_ok == 0 ]; do
   if [ "$time" == "$MAXIMUM_WAIT" ]; then
      echo "Unable to start listening application after waiting $MAXIMUM_WAIT"
      exit 1
   fi
   sleep 1
   time=$[$time+1]
   nc -z localhost ${LISTENER_PORT}
   port_not_ok=$?
done

# Test to see if we have a broker running on ${CB_PORT} if so kill it!
running_broker=$(ps -fe | grep contextBroker | grep ${CB_PORT} | wc -l)
if [ $running_broker -ne 0 ]; then
  kill $(ps -fe | grep contextBroker | grep ${CB_PORT} | awk '{print $2}')
  # Wait some time so the broker can finish properly
  sleep 1
  running_broker=$(ps -fe | grep contextBroker | grep ${CB_PORT} | wc -l)
  if [ $running_broker -ne 0 ]; then
    # If the broker refuses to stop politely, kill the process by brute force
    kill -9 $(ps -fe | grep contextBroker | grep ${CB_PORT} | awk '{print $2}')
    sleep 1
    running_broker=$(ps -fe | grep contextBroker | grep ${CB_PORT} | wc -l)
    if [ $running_broker -ne 0 ]; then
      echo "Existing contextBroker is inmortal, can not be killed!"
      exit 1
    fi
  fi
fi

# Set MongoDB with initial status (2 subscriptions)
# expiration 1879048191 corresponds to year 2029 so we avoid any expiration problem in the next 16 years
mongo ${CB_DATABASE_NAME} <<EOF
db.dropDatabase()
db.csubs.insert({
        "expiration" : 1879048191,
        "reference" : "http://localhost:${LISTENER_PORT}/notify",
        "entities" : [
                {
                        "id" : "ConferenceRoom",
                        "type" : "Room",
                        "isPattern" : "false"
                }
        ],
        "attrs" : [ ],
        "conditions" : [
                {
                        "type" : "ONTIMEINTERVAL",
                        "value" : 5
                }
        ]
})
db.csubs.insert({
        "expiration" : 1879048191,
        "reference" : "http://localhost:${LISTENER_PORT}/notify",
        "entities" : [
                {
                        "id" : "OfficeRoom",
                        "type" : "Room",
                        "isPattern" : "false"
                }
        ],
        "attrs" : [ ],
        "conditions" : [
                {
                        "type" : "ONTIMEINTERVAL",
                        "value" : 4
                }
        ]
})
EOF

CB_START_CMD="contextBroker -harakiri -port ${CB_PORT} -pidpath ${CB_PID_FILE} -db ${CB_DATABASE_NAME} -t 0-255"
if [ "$VALGRIND" == "" ]; then
  $CB_START_CMD
  # Wait some time so that the contextBroker is able to do its initial steps (reset database, start HTTP server, etc.)
  sleep 1
else
  valgrind $CB_START_CMD > ${TEST_BASENAME}.valgrind.out 2>&1 &
  # Waiting for valgrind to start (sleep 10)
  sleep 10s
fi

# Test to see if we have a broker running on ${CB_PORT} if not raise an error
running_broker=$(ps -fe | grep contextBroker | grep ${CB_PORT} | wc -l)
if [ $running_broker -ne 1 ]; then
  echo "Unable to start contextBroker"
  exit 1
fi

--SHELL--
(curl localhost:${CB_PORT}/NGSI9/registerContext -s -S --header 'Content-Type: application/xml' -d @- | xmllint --format - ) <<EOF
<?xml version="1.0"?>
  <registerContextRequest>
    <contextRegistrationList>
      <contextRegistration>
        <entityIdList>
          <entityId type="Room" isPattern="false">
            <id>ConferenceRoom</id>
          </entityId>
          <entityId type="Room" isPattern="false">
            <id>OfficeRoom</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>temperature</name>
            <type>degree</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationList>
    <duration>PT1H</duration>
    <registrationId></registrationId>
  </registerContextRequest>
EOF
echo "1: ++++++++++++++++++++"

# Wait 11 seconds, enough to get 2 notifications of each case
sleep 11

#Get accumulated data
curl localhost:${LISTENER_PORT}/dump -s -S

--REGEXPECT--
<?xml version="1.0"?>
<registerContextResponse>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
  <duration>PT1H</duration>
</registerContextResponse>
1: ++++++++++++++++++++
POST http://localhost:REGEX(\d+)/notify
Content-Length: 145
User-Agent: NGSI Rest Library
Host: localhost:REGEX(\d+)
Accept: */*
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
</notifyContextRequest>

=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 145
User-Agent: NGSI Rest Library
Host: localhost:REGEX(\d+)
Accept: */*
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
</notifyContextRequest>

=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 736
User-Agent: NGSI Rest Library
Host: localhost:REGEX(\d+)
Accept: */*
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>temperature</name>
            <type>degree</type>
            <contextValue></contextValue>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</notifyContextRequest>

=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 740
User-Agent: NGSI Rest Library
Host: localhost:REGEX(\d+)
Accept: */*
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="Room" isPattern="false">
          <id>ConferenceRoom</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>temperature</name>
            <type>degree</type>
            <contextValue></contextValue>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</notifyContextRequest>

=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 736
User-Agent: NGSI Rest Library
Host: localhost:REGEX(\d+)
Accept: */*
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>temperature</name>
            <type>degree</type>
            <contextValue></contextValue>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</notifyContextRequest>

=======================================
POST http://localhost:REGEX(\d+)/notify
Content-Length: 740
User-Agent: NGSI Rest Library
Host: localhost:REGEX(\d+)
Accept: */*
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="Room" isPattern="false">
          <id>ConferenceRoom</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>temperature</name>
            <type>degree</type>
            <contextValue></contextValue>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</notifyContextRequest>

=======================================
--TEARDOWN--
if [ "$VALGRIND" == "" ]; then
  kill $(cat ${CB_PID_FILE})
  rm /tmp/orion_${CB_PORT}.pid
else
  curl localhost:${CB_PORT}/exit/harakiri >> ${TEST_BASENAME}.valgrind.stop.out
  # Waiting for valgrind to terminate (sleep 10)
  sleep 10
fi
mv /tmp/contextBroker.log /tmp/contextBroker.log.recoverthreads
kill $(curl localhost:${LISTENER_PORT}/pid -s -S)
