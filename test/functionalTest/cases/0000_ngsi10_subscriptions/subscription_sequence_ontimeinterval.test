# Copyright 2013 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

# VALGRIND_READY - to mark the test ready for valgrindTestSuite.sh

--NAME--
Subscription sequence ONTIMEINTERVAL

--SHELL-INIT--
dbInit CB
brokerStart CB
accumulatorStart

--SHELL--

url=/v1/updateContext
payload='<?xml version="1.0"?>
<updateContextRequest>
  <contextElementList>
    <contextElement>
      <entityId type="Room" isPattern="false">
        <id>OfficeRoom</id>
      </entityId>
      <contextAttributeList>
        <contextAttribute>
          <name>temperature</name>
          <type>clima</type>
          <contextValue>t100</contextValue>
        </contextAttribute>
      </contextAttributeList>
    </contextElement>
  </contextElementList>
  <updateAction>APPEND</updateAction>
</updateContextRequest>'
orionCurl --url "$url" --payload "$payload"
echo


echo "1: ++++++++++++++++++++"
url="/v1/subscribeContext"
payload='<?xml version="1.0"?>
<subscribeContextRequest>
  <entityIdList>
    <entityId type="Room" isPattern="false">
      <id>OfficeRoom</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>temperature</attribute>
    <attribute>lightstatus</attribute>
  </attributeList>
  <reference>http://127.0.0.1:'${LISTENER_PORT}'/notify</reference>
  <duration>PT5H</duration>
  <notifyConditions>
    <notifyCondition>
      <type>ONTIMEINTERVAL</type>
      <condValueList>
        <condValue>PT2S</condValue>
      </condValueList>
    </notifyCondition>
  </notifyConditions>
</subscribeContextRequest>'
orionCurl --url "$url" --payload "$payload"
SUB_ID=$(echo "$_response" | grep subscriptionId | awk -F '>' '{print $2}' | awk -F '<' '{print $1}' | grep -v '^$' )

# Interval from 0 to 5: we receive three notifications (t=0, t=2, t=4)
sleep 5
valgrindSleep 1


echo "2: ++++++++++++++++++++"
url=/v1/updateContextSubscription
payload='<?xml version="1.0"?>
<updateContextSubscriptionRequest>
  <duration>PT10M</duration>
  <subscriptionId>'$SUB_ID'</subscriptionId>
  <notifyConditions>
    <notifyCondition>
      <type>ONTIMEINTERVAL</type>
      <condValueList>
        <condValue>PT4S</condValue>
      </condValueList>
    </notifyCondition>
  </notifyConditions>
</updateContextSubscriptionRequest>'
orionCurl --url "$url" --payload "$payload"

# Interval from 5 to 14: we will receive three notifications (t=5, t=9, t=13)
sleep 9
valgrindSleep 1


echo "3: ++++++++++++++++++++"
url=/v1/updateContextSubscription
payload='<?xml version="1.0"?>
<updateContextSubscriptionRequest>
  <duration>PT10M</duration>
  <subscriptionId>'$SUB_ID'</subscriptionId>
  <notifyConditions>
    <notifyCondition>
      <type>ONTIMEINTERVAL</type>
      <condValueList>
        <condValue>PT10S</condValue>
      </condValueList>
    </notifyCondition>
  </notifyConditions>
</updateContextSubscriptionRequest>'
orionCurl --url "$url" --payload "$payload"



# Interval from 14 to 35: we will receive three notifications (t=14, t=24, t=34)
sleep 21
valgrindSleep 1


echo "4: ++++++++++++++++++++"
url=/v1/updateContextSubscription
payload='<?xml version="1.0"?>
<updateContextSubscriptionRequest>
  <duration>PT10M</duration>
  <subscriptionId>'$SUB_ID'</subscriptionId>
  <notifyConditions>
    <notifyCondition>
      <type>ONTIMEINTERVAL</type>
      <condValueList>
        <condValue>PT2S</condValue>
      </condValueList>
    </notifyCondition>
  </notifyConditions>
</updateContextSubscriptionRequest>'
orionCurl --url "$url" --payload "$payload"

# Interval from 35 to 40 seconds, so we will receive three notifications (t=35, t=37, t=39)
sleep 5
valgrindSleep 1


echo "5: ++++++++++++++++++++"
url=/v1/updateContextSubscription
payload='<?xml version="1.0"?>
<updateContextSubscriptionRequest>
  <duration>P1Y</duration>
  <subscriptionId>'$SUB_ID'</subscriptionId>
  <throttling>PT11S</throttling>
</updateContextSubscriptionRequest>'
orionCurl --url "$url" --payload "$payload"

#
# Interval from 40 to 66. Only the times marked with * will produce notifications, due to throttling
# t=41, t=43, t=45, t=47, t=49, t=51*, t=53, t=55, t=57, t=59, t=61, t=63*, t=65
#
# FIXME: in theory, it should be t=51 and t=63, but it happens sometimes that it is t=53 and t=65. This oscilation
# could be due to the processing at context broker involve #some delays. REGEXPECT has been adjusted to take
# into account both possibilities. However, this curious behaviour should be investigated.
#
sleep 26
valgrindSleep 1

echo "6: ++++++++++++++++++++"
url=/v1/updateContextSubscription
payload='<?xml version="1.0"?>
<updateContextSubscriptionRequest>
  <duration>P1Y</duration>
  <subscriptionId>'$SUB_ID'</subscriptionId>
  <throttling>PT0S</throttling>
</updateContextSubscriptionRequest>'
orionCurl --url "$url" --payload "$payload"
echo



# Interval 66 to 70: we will receive two notifications (t=67, t=69)
sleep 4
valgrindSleep 1
echo Notification count from mongo:
mongoCmd ${CB_DATABASE_NAME} "db.csubs.findOne({_id: ObjectId(\"$SUB_ID\")}, {_id: 0, count: 1})"


echo "7: ++++++++++++++++++++"
url=/v1/unsubscribeContext
payload='<?xml version="1.0"?>
<unsubscribeContextRequest>
  <subscriptionId>'$SUB_ID'</subscriptionId>
</unsubscribeContextRequest>'
orionCurl --url "$url" --payload "$payload"

#Get accumulated data (only the first notification and the notification number and times)
echo "8: ++++++++++++++++++++"
accumulatorDump | head -n 32

NUMBER=$(accumulatorCount)
echo "NUMBER: $NUMBER"

TIMES=$(curl localhost:${LISTENER_PORT}/times -s -S )
echo "TIMES: $TIMES"
echo

--REGEXPECT--
HTTP/1.1 200 OK
Content-Length: 639
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextResponse>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>temperature</name>
            <type>clima</type>
            <contextValue/>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</updateContextResponse>

1: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 192
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<subscribeContextResponse>
  <subscribeResponse>
    <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
    <duration>PT5H</duration>
  </subscribeResponse>
</subscribeContextResponse>
2: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 211
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextSubscriptionResponse>
  <subscribeResponse>
    <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
    <duration>PT10M</duration>
  </subscribeResponse>
</updateContextSubscriptionResponse>
3: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 211
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextSubscriptionResponse>
  <subscribeResponse>
    <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
    <duration>PT10M</duration>
  </subscribeResponse>
</updateContextSubscriptionResponse>
4: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 211
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextSubscriptionResponse>
  <subscribeResponse>
    <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
    <duration>PT10M</duration>
  </subscribeResponse>
</updateContextSubscriptionResponse>
5: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 244
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextSubscriptionResponse>
  <subscribeResponse>
    <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
    <duration>P1Y</duration>
    <throttling>PT11S</throttling>
  </subscribeResponse>
</updateContextSubscriptionResponse>
6: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 243
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<updateContextSubscriptionResponse>
  <subscribeResponse>
    <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
    <duration>P1Y</duration>
    <throttling>PT0S</throttling>
  </subscribeResponse>
</updateContextSubscriptionResponse>

Notification count from mongo:
{ "count" : 16 }
7: ++++++++++++++++++++
HTTP/1.1 200 OK
Content-Length: 207
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<unsubscribeContextResponse>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <statusCode>
    <code>200</code>
    <reasonPhrase>OK</reasonPhrase>
  </statusCode>
</unsubscribeContextResponse>
8: ++++++++++++++++++++
POST http://127.0.0.1:REGEX(\d+)/notify
Content-Length: 738
User-Agent: orion/REGEX(\d+\.\d+\.\d+.*)
Host: 127.0.0.1:REGEX(\d+)
Accept: application/xml, application/json
Content-Type: application/xml

<notifyContextRequest>
  <subscriptionId>REGEX([0-9a-f]{24})</subscriptionId>
  <originator>localhost</originator>
  <contextResponseList>
    <contextElementResponse>
      <contextElement>
        <entityId type="Room" isPattern="false">
          <id>OfficeRoom</id>
        </entityId>
        <contextAttributeList>
          <contextAttribute>
            <name>temperature</name>
            <type>clima</type>
            <contextValue>t100</contextValue>
          </contextAttribute>
        </contextAttributeList>
      </contextElement>
      <statusCode>
        <code>200</code>
        <reasonPhrase>OK</reasonPhrase>
      </statusCode>
    </contextElementResponse>
  </contextResponseList>
</notifyContextRequest>
=======================================
NUMBER: 16
TIMES: REGEX((0, 2, 4, 5, 9, 13, 14, 24, 34, 35, 37, 39, 53, 65, 67, 69|0, 2, 4, 5, 9, 13, 14, 24, 34, 35, 37, 39, 51, 63, 67, 69))

--TEARDOWN--
brokerStop CB
accumulatorStop
dbDrop CB
