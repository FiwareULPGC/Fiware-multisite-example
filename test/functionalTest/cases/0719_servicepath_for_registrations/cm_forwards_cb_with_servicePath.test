# Copyright 2015 Telefonica Investigacion y Desarrollo, S.A.U
#
# This file is part of Orion Context Broker.
#
# Orion Context Broker is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Orion Context Broker is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
# General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Orion Context Broker. If not, see http://www.gnu.org/licenses/.
#
# For those usages not covered by this license please contact with
# iot_support at tid dot es

--NAME--
CM forwards PSB OK

--SHELL-INIT--
dbInit CB
dbInit CM

brokerStart CB 0-255 -multiservice
brokerStart CM 0-255 -multiservice

--SHELL--

#
# 01. Initial registration in CM, service-path /cm/cb
# 02. Check the registration in CM, service-path /cm/cb
# 03. Check the registration in CB, service-path /cm/cb
# 04. Verify service-path in CB, test with erroneous service-path /cm/cb2
# 05. Update registration in CM, service-path /cm/cb
# 06. Check the registration in CM, service-path /cm/cb
# 07. Check the registration in CB, service-path /cm/cb
# 08. Verify service-path in CB, test with erroneous service-path /cm/cb2
# 09. Check that everything is ok in database layer
#


echo "01. Initial registration in CM, service-path /cm/cb"
echo "==================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
<registerContextRequest>
  <contextRegistrationList>
    <contextRegistration>
      <entityIdList>
        <entityId type="T" isPattern="false">
          <id>E1</id>
        </entityId>
        <entityId type="T" isPattern="false">
          <id>E2</id>
        </entityId>
      </entityIdList>
      <contextRegistrationAttributeList>
        <contextRegistrationAttribute>
          <name>A1</name>
          <type>T</type>
          <isDomain>false</isDomain>
        </contextRegistrationAttribute>
      </contextRegistrationAttributeList>
      <providingApplication>http://localhost:1028/application</providingApplication>
    </contextRegistration>
  </contextRegistrationList>
  <duration>PT1H</duration>
</registerContextRequest>'
orionCurl --url /v1/registry/registerContext --payload "$payload" --port $CM_PORT --servicePath /cm/cb
REG_ID=$(echo "$_response" | grep registrationId | awk -F '>' '{print $2}' | awk -F '<' '{print $1}' | grep -v '^$' )
echo
echo


echo "02. Check the registration in CM, service-path /cm/cb"
echo "====================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
<discoverContextAvailabilityRequest>
  <entityIdList>
    <entityId type="T" isPattern="false">
      <id>E1</id>
    </entityId>
    <entityId type="T" isPattern="false">
      <id>E2</id>
    </entityId>
  </entityIdList>
  <attributeList>
    <attribute>A1</attribute>
    <attribute>A2</attribute>
  </attributeList>
</discoverContextAvailabilityRequest>'
orionCurl --url /v1/registry/discoverContextAvailability --payload "$payload" --port $CM_PORT --servicePath /cm/cb
echo
echo


echo "03. Check the registration in CB, service-path /cm/cb"
echo "====================================================="
url="/v1/registry/discoverContextAvailability"
payload='<?xml version="1.0" encoding="UTF-8"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="T" isPattern="false">
        <id>E1</id>
      </entityId>
      <entityId type="T" isPattern="false">
        <id>E2</id>
      </entityId>
    </entityIdList>
    <attributeList>
      <attribute>A1</attribute>
      <attribute>A2</attribute>
    </attributeList>
  </discoverContextAvailabilityRequest>'
orionCurl --url "$url" --payload "${payload}" --servicePath /cm/cb
echo
echo


echo "04. Verify service-path in CB, test with erroneous service-path /cm/cb2"
echo "======================================================================="
url="/v1/registry/discoverContextAvailability"
payload='<?xml version="1.0" encoding="UTF-8"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="T" isPattern="false">
        <id>E1</id>
      </entityId>
      <entityId type="T" isPattern="false">
        <id>E2</id>
      </entityId>
    </entityIdList>
    <attributeList>
      <attribute>A1</attribute>
      <attribute>A2</attribute>
    </attributeList>
  </discoverContextAvailabilityRequest>'
orionCurl --url "$url" --payload "${payload}" --servicePath /cm/cb2
echo
echo


echo "05. Update registration in CM, service-path /cm/cb"
echo "=================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
  <registerContextRequest>
    <contextRegistrationList>
      <contextRegistration>
        <entityIdList>
          <entityId type="Car" isPattern="false">
            <id>MyCar</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>speed</name>
            <type>float</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/mycar</providingApplication>
      </contextRegistration>
    </contextRegistrationList>
    <duration>PT5H</duration>
    <registrationId>'$REG_ID'</registrationId>
  </registerContextRequest>'
orionCurl --url /v1/registry/registerContext --payload "$payload" --port $CM_PORT --servicePath /cm/cb
echo
echo


echo "06. Check the registration in CM, service-path /cm/cb"
echo "====================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
<discoverContextAvailabilityRequest>
  <entityIdList>
    <entityId type="Car" isPattern="false">
      <id>MyCar</id>
    </entityId>
  </entityIdList>
  <attributeList>
  </attributeList>
</discoverContextAvailabilityRequest>'
orionCurl --url /v1/registry/discoverContextAvailability --payload "$payload" --port $CM_PORT --servicePath /cm/cb
echo
echo


echo "07. Check the registration in CB, service-path /cm/cb"
echo "====================================================="
payload='<?xml version="1.0" encoding="UTF-8"?>
<discoverContextAvailabilityRequest>
  <entityIdList>
    <entityId type="Car" isPattern="false">
      <id>MyCar</id>
    </entityId>
  </entityIdList>
  <attributeList>
  </attributeList>
</discoverContextAvailabilityRequest>'
orionCurl --url /v1/registry/discoverContextAvailability --payload "$payload" --servicePath /cm/cb
echo
echo


echo "08. Verify service-path in CB, test with erroneous service-path /cm/cb2"
echo "======================================================================="
url="/v1/registry/discoverContextAvailability"
payload='<?xml version="1.0" encoding="UTF-8"?>
  <discoverContextAvailabilityRequest>
    <entityIdList>
      <entityId type="T" isPattern="false">
        <id>E1</id>
      </entityId>
      <entityId type="T" isPattern="false">
        <id>E2</id>
      </entityId>
    </entityIdList>
    <attributeList>
      <attribute>A1</attribute>
      <attribute>A2</attribute>
    </attributeList>
  </discoverContextAvailabilityRequest>'
orionCurl --url "$url" --payload "${payload}" --servicePath /cm/cb2
echo
echo


echo "09. Check that everything is ok in database layer"
echo "================================================="
mongoCmd ${CB_DATABASE_NAME} 'db.registrations.count()'
mongoCmd ${CM_DATABASE_NAME} 'db.registrations.count()'

RESULT=$(mongoCmd ${CB_DATABASE_NAME} 'db.registrations.find({}, {_id: 1})')
# The next line is based in processing the following pattern:
#   { "_id" : ObjectId("5213a9a1db818a34990755c3") }
ID1=$(echo $RESULT | awk '{print $4}' | awk -F '"' '{print $2}')

RESULT=$(mongoCmd ${CM_DATABASE_NAME} 'db.registrations.find({}, {fwdRegId: 1, _id: 0})')
# The next line is based in processing the following pattern:
#   { "fwdRegId" : "5213a9a1db818a34990755c3" }
ID2=$(echo $RESULT | awk '{print $4}' | awk -F '"' '{print $2}')

if [ "$ID1" == "$ID2" ]
then
   echo "OK"
else
   echo "different IDs: <$ID1> and <$ID2>"
fi


--REGEXPECT--
01. Initial registration in CM, service-path /cm/cb
===================================================
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT1H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>


02. Check the registration in CM, service-path /cm/cb
=====================================================
HTTP/1.1 200 OK
Content-Length: 862
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="T" isPattern="false">
            <id>E1</id>
          </entityId>
          <entityId type="T" isPattern="false">
            <id>E2</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>A1</name>
            <type>T</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>


03. Check the registration in CB, service-path /cm/cb
=====================================================
HTTP/1.1 200 OK
Content-Length: 862
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="T" isPattern="false">
            <id>E1</id>
          </entityId>
          <entityId type="T" isPattern="false">
            <id>E2</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>A1</name>
            <type>T</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/application</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>


04. Verify service-path in CB, test with erroneous service-path /cm/cb2
=======================================================================
HTTP/1.1 200 OK
Content-Length: 185
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</discoverContextAvailabilityResponse>


05. Update registration in CM, service-path /cm/cb
==================================================
HTTP/1.1 200 OK
Content-Length: 141
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<registerContextResponse>
  <duration>PT5H</duration>
  <registrationId>REGEX([0-9a-f]{24})</registrationId>
</registerContextResponse>


06. Check the registration in CM, service-path /cm/cb
=====================================================
HTTP/1.1 200 OK
Content-Length: 774
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Car" isPattern="false">
            <id>MyCar</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>speed</name>
            <type>float</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/mycar</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>


07. Check the registration in CB, service-path /cm/cb
=====================================================
HTTP/1.1 200 OK
Content-Length: 774
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <contextRegistrationResponseList>
    <contextRegistrationResponse>
      <contextRegistration>
        <entityIdList>
          <entityId type="Car" isPattern="false">
            <id>MyCar</id>
          </entityId>
        </entityIdList>
        <contextRegistrationAttributeList>
          <contextRegistrationAttribute>
            <name>speed</name>
            <type>float</type>
            <isDomain>false</isDomain>
          </contextRegistrationAttribute>
        </contextRegistrationAttributeList>
        <providingApplication>http://localhost:1028/mycar</providingApplication>
      </contextRegistration>
    </contextRegistrationResponse>
  </contextRegistrationResponseList>
</discoverContextAvailabilityResponse>


08. Verify service-path in CB, test with erroneous service-path /cm/cb2
=======================================================================
HTTP/1.1 200 OK
Content-Length: 185
Content-Type: application/xml
Date: REGEX(.*)

<?xml version="1.0"?>
<discoverContextAvailabilityResponse>
  <errorCode>
    <code>404</code>
    <reasonPhrase>No context element found</reasonPhrase>
  </errorCode>
</discoverContextAvailabilityResponse>


09. Check that everything is ok in database layer
=================================================
1
1
OK
--TEARDOWN--
brokerStop CB
brokerStop CM

dbDrop CB
dbDrop CM
