FORMAT: 1A
HOST: http://orion.lab.fiware.org/

# FIWARE-NGSI-Simple

FIWARE-NGSI Simple API (v2) Specification.

This is a work in progress and is changing on a daily basis.
Please send your comments to fiware-ngsi@lists.fiware.org. You can
trace the discussions checking the archives of the mailing list:
https://lists.fiware.org/private/fiware-ngsi/ (list subscription
required).

In addition, note that a list of currently open discussions is available at

* https://github.com/telefonicaid/fiware-orion/issues/1022
* https://github.com/telefonicaid/fiware-orion/issues/1034
* https://github.com/telefonicaid/fiware-orion/issues/1035

This specification is licensed under the
[FIWARE Open Specification License]
(http://forge.fiware.org/plugins/mediawiki/wiki/fiware/index.php/FI-WARE_Open_Specification_Legal_Notice_%28essential_patents_license%29).


## JSON entity representation

An entity is represented by a a JSON object which contain the following properties:

* `id` for the entity ID, represented by a JSON string. If the entity has an `id` attribute itself it will be ignored.
* `type` for the entity type, represented by a JSON string. If the entity has a `type` attribute itself it will be ignored.
  If the entity doesn't have a type, then this property is not included.
* A collection of properties, one per entity attribute. Properties representing attributes with no metadata
  or type are rendered as regular JSON values. Properties representing attributes which specify a type or include
  metadata are rendered as JSON objects with the following properties:
  * `value`: for the attribute value, rendered as a regular JSON value (string, number or boolean), object or array.
  * `type`: a JSON string which represents the user-defined NGSI attribute type.
  * A collection of properties one per metadata field associated to the attribute value. Metadata properties follow
    the same representation rules that applies to properties which represent attributes (except that a metadata
    cannot have metadata properties).

### Special attribute types

Generally speaking, user-defined attribute types are informative, they are processed by the NGSIv2 server in
an opaque way. Nonetheless, the types described below are used to convey an special meaning

* `date`:  identifies dates, in ISO8601 format. These attributes can be used with the
  greater than, lesser than, greater or equal, lesser or equal and range query operators. Eg:

```
  "timestamp": {
    "value": "2017-06-17T07:21:24.238Z",
    "type: "date"
  }
```

* `geo:point`: identifies the location of the entity in geo-location queries. If an entity have several attributes
  of this type all them define a possible location for the entity from a geo-location query point of view. (TBD:
  check feasibility).

```
  "location": {
    "value": "41.3763726, 2.1864475,14",
    "type": "geo:point"
  }
```

### Canonical format description

This is a variant of the represention format aimed at clients that need a regular representation of the entities
and attributes, that can be used in the operations that support the `canonical` option.

* Entity `type` is mandatory. If the entity has no type, JSON `null` is used.
* Property `attrs` is mandatory and includes a JSON object for the attributes.
* Each attribute is described always with `value`, `type` and `metadata`. All fields are mandatory (attributes
  without type use JSON `null` for that property).
* Each metadata is described always with `value` and `type`. Both fields are mandatory (metadata
  without type use JSON `null` for that property).

```
{
  "type": "Room",
  "id": "Boe_Idearium",
  "attrs": {
    "speed": {
      "value": 88,
      "type": null,
      "metadata": { }
    },
    "pressure": {
      "value": 12.1,
      "type": null,
      "metadata": { }
    },
    "temperature": {
      "value": 22,
      "type": "urn:phenomenum:temperature",
      "metadata": { }
    },
    "colour": {
      "value": "black",
      "type": "myString",
      "metadata": { }
    }
  }
}
```

## Error responses

In the case of being present, the error payload is JSON object including the following fields:

* `error` (mandatory): a textual description of the error.
* `description` (optional): additional information about the error.

Error list (HTTP response code in paranthesis):

* NotFound (404). The context element referred in the request has not been found.
* TooManyResults (409). There are several results that match with the resource identification used
  in the request. This typically the case of requesting an entity with not enough information and the
  solution is to enhance entity identification adding more information, e.g. adding entity type
  and/or service path.

## API Entry Point [/v2]

### Retrieve Entry Points [GET /v2]

This resource does not have any attributes. Instead it offers the initial
API affordances in the form of the links in the JSON body.

It is recommended to follow the “url” link values,
[Link](https://tools.ietf.org/html/rfc5988) or Location headers where
applicable to retrieve resources. Instead of constructing your own URLs,
to keep your client decoupled from implementation details.

+ Response 200 (application/json)

        {
            "entities_url":      "/v2/entities",
            "types_url":         "/v2/types",
            "subscriptions_url": "/v2/subscriptions",
            "registrations_url": "/v2/registrations"
        }

## Entities [/v2/entities{?limit,offset,options,type,id,idPattern,q,geometry,coords,attrs}]

### List entities [GET /v2/entities{?limit,offset,options,type,id,idPattern,q,geometry,coords,attrs}]

Retrieves a list of entities which match criteria defined by the following parameters: `id`, `type`, `idPattern`, `q`,
`geometry` and `coords` attribute (see below for a detailed description of these parameters). A given entity
have to match all the criteria to be retrieved (i.e. criteria are combined in a logical AND way).

<table style="width: 100%; margin: 12px 0 0 0;">
<tr><td colspan="2"><strong>Required Parameters</strong></td></tr>
<tr><td colspan="2">none</td></tr>
<tr><td colspan="2"><strong>Optional Parameters</strong></td></tr>
<tr>
  <td style="padding-right: 40px; width: 140px;">id</td><td>A comma separated list of elements.
  Retrieve entities which ID match one of the elements in the list.</td>
</tr>
<tr>
  <td style="padding-right: 40px; width: 140px;">type</td><td>A comma separated list of elements.
  Retrieve entities which type match one of the elements in the list.</td>
</tr>
<tr>
  <td style="padding-right: 40px; width: 140px;">idPattern</td><td>A correctly formated regular
  expression. Retrieve entities which ID matches the regular expression.</td>
</tr>
<tr><td style="padding-right: 40px; width: 140px;">q</td><td>

<p>A query expression, composed of a list of statements separated by <code>;</code>, i.e.</p>

<p><code>
q=statement;statements;statement
</code></p>

<p>Each statement express a matching condition. The result of the query is the match on each one of the statements, e.g. a
AND logical condition among the different statements. There are two kind of statements: <em>unary statements</em> and
<em>binary staments</em>.</p>

<p>Binary statements are composed by an attribute name (e.g. "temperature"), operator and value (which format
depends on the operator), e.g.:</p>

<p><code>
temperature==50<br/>
temperature<=20
</code></p>

<p>The list of operators (and the format of the values they use) is as follows:</p>

<ul>
  <li>Equal: <code>==</code>. It accepts the following values:
    <ul>
      <li>Single element, e.g. <code>temperature==40</code>. It matches entities whose attribute value
      that exact value.</li>
      <li>A list of comma-separated values, e.g. <code>color==black,red</code>. It matches entities whose
      attribute value is one of the values (OR clause). Eg. entities which <code>color</code> is set to
      <code>black</code> will match, while entities which <code>color</code> is set to <code>white</code>
      will not match.</li>
      <li>A range, specified as a minimum and maximum separated by <code>..</code>. It match if
      the value is in the interval between the minimum and the maximum (both included). It can only be used
      with attributes which contain dates or numbers. E.g. <code>temperature==10..20</code> matchs if the
      temperature is greater or equal than 10 and lower or equal than 20.</li>
    </ul>
  </li>
  <li>Unequal: <code>!=</code>. It accepts the following values:
    <ul>
      <li>The value is a single element, e.g. <code>temperature!=40</code>. It matches entities whose attribute
      value is not that exact value.</li>
      <li>A list of comma-separated values, e.g. <code>color!=black,red</code>. It matches entities whose
      attribute value is not any of the values (AND clause). Eg. entities whose <code>color</code> is set
      to <code>black</code> will not match, while entities whose <code>color</code> is set to
      <code>white</code> match.</li>
      <li>A range, specified as a minimum and maximum separated by <code>..</code>. It match
      if the value is not in the interval between the minimum and the maximum (both included). It can only
      be used with attributes which contain dates or numbers. E.g. <code>temperature!=10..20</code>matchs if
      the temperature is lower than 10 or greater than 20 (it will not match if the tempeature is 10 or the
      temperature is 20).</li>
    </ul>
  </li>
  <li>Greater than: <code>&gt;</code>. The value is a single element, e.g. <code>temperature&gt;40</code>. It
  matches entities which attribute value is strictly greater than that value. It only makes sense when
  used with attributes which contain dates or numbers (using with attributes of other type might lead to
  unexpected results).</li>
  <li>Lesser than: <code>&lt;</code>. The value is a single element, e.g. <code>temperature&lt;40</code>. It
  matches entities which attribute value is strictly lesser than that value. It only makes sense when
  used with attributes which contain dates or numbers (using with attributes of other type might lead to
  unexpected results).</li>
  <li>Greater or equal than: <code>&gt;=</code>. The value is a single element, e.g. <code>temperature&gt;=40</code>.
  It matches entities which attribute value is greater than or equal to that value. It only makes sense when
  used with attributes which contain dates or numbers (using with attributes of other type might lead to
  unexpected results).</li>
  <li>Lesser or equal than: <code>&lt;=</code>. The value is a single element, e.g. <code>temperature&lt;=40</code>. It
  matches entities which attribute value is lesser than or equal to that value. It only makes sense when
  used with attributes which contain dates or numbers (using with attributes of other type might lead to
  unexpected results).</li>
</ul>

<p>In the case of equal or inequal, if the value to match include a <code>,</code>, you can use simple quote
(<code>'</code>), e.g: <code>color=='light,green','deep,blue'</code>.</p>

<p>Unary statements are composed of a unary operator (either <code>+</code>or <code>-</code>) and are used in two situations:</p>

<ul>
  <li>To check for attribute existence. E.g. <code>+temperature</code>matches entities which have
  a temperature attribute (no matter its value), while <code>-temperature</code>matches entities which don't have
  a temperature attribute.</li>
  <li>To check for entity type existence, with the <code>type</code>keyword. E.g, <code>-type</code>
  matches entities which don't have a type.</li>
</ul>

</td></tr>
<tr><td style="padding-right: 40px; width: 140px;">geometry</td><td>

<p>Defines a geografical area so only the entities located in that area matches the query. It is composed of a tokens list
separated by <code>;</code>. The first token is the shape of the geometry, the rest of the tokens (if any) depends
on the shape. In particular, the following geometries can be defined so far:</p>

<ul>
  <li><code>geometry=circle;radius:4000</code>, inside a circle (radius is in meters).</li>
  <li><code>geometry=circle;radius:4000;external</code>, outside a circle (radius is in meters).</li>
  <li><code>geometry=polygon</code>, inside a polygon.</li>
  <li><code>geometry=polygon;external</code>, outside a polygon.</li>
</ul>

</td></tr>
<tr><td style="padding-right: 40px; width: 140px;">coords</td><td>

<p>List of coordinates (separated by <code>;</code>) are interpreted depending on the geometry parameter as follows:</p>

<ul>
  <li>In the case of <code>circle</code>geometry, the parameter includes just one element, which
  is the center of the circle.</li>
  <li>In the case of <code>polygon</code>includes a list of elements, which are the vertices of
  the polygon.</li>
</ul>

</td></tr>
<tr><td style="padding-right: 40px; width: 140px;">attrs</td>
    <td>Comma-separated list of attribute names which data will be included in the response. If this parameter is not
    included, all the attributes are retrieved.</td>
</tr>
<tr><td style="padding-right: 40px; width: 140px;">limit</td><td>Limit the number of entities to be retrieved</td></tr>
<tr><td style="padding-right: 40px; width: 140px;">offset</td><td>Skip a number of records</td></tr>
<tr><td style="padding-right: 40px; width: 140px;">options</td><td>
This operation supports two options:

<ul>
  <li><code>count</code>: when used, the total entities number is returned as a HTTP in the response name <code>X-Total-Count</code>.</li>
  <li><code>cannonical</code>: when used, the response payload used the "cannonical form". See JSON entity representation format section
  for details.</li>
</td></tr>
</table>

The response payload is an Array which contains one object per matching entity. Each entity follows
the JSON entity representation format (described in a section above).

Response code:

* Successful operation uses 200 OK
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + limit: 20 (optional, number)
    + offset: 20 (optional, number)
    + type: Room (optional, string)
    + id: Bcn_Welt (optional, string)
    + idPattern: (optional, string)

+ Response 200 (application/json)

        [
         {
            "type": "Room",
            "id": "DC_S1-D41",
            "temperature": 35.6
         },
         {
            "type": "Room",
            "id": "Boe-Idearium",
            "temperature": 22.5
         },
         {
            "type": "Car",
            "id": "P-9873-K",
            "speed": {
                "value": 100,
                "type": "number",
                "accuracy": 2,
                "timestamp": {
                    "value": "2015-06-04T07:20:27.378Z",
                    "type": "date"
                }
            }
         }
        ]

### Create entity [POST /v2/entities]

The payload is an object representing the entity to be created. The object follows
the JSON entity representation format (described in a section above).

Response:

* Successful operation uses 201 Created. Reponse includes a `Location` header with the URL of the
  created entity.
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Request (application/json)

        {
            "type": "Room",
            "id": "Bcn-Welt",
            "temperature": 21.7,
            "humidity": 60,
            "location": {
                "value":  "41.3763726, 2.1864475",
                "type": "geo:point",
                "crs": "WGS84"
            },
        }

+ Response 201

    + Headers

            Location: /v2/entities/Bcn-Welt


## Entity by ID [/v2/entities/{entityId}{?attrs,options}]

### Retrieve entity [GET /v2/entities/{entityId}{?attrs}]

<table style="width: 100%; margin: 12px 0 0 0;">
<tr><td colspan="2"><strong>Required Parameters</strong></td></tr>
<tr><td colspan="2">none</td></tr>
<tr><td colspan="2"><strong>Optional Parameters</strong></td></tr>
<tr>
  <td style="padding-right: 40px; width: 140px;">attrs</td>
  <td>Comma-separated list of attribute names which data will be included in the response. If this parameter is not
  included, all the attributes are retrieved.</td>
</tr>
</table>

The response is an object representing the entity identified by the ID. The object follows
the JSON entity representation format (described in a section above).

This operation must return only one entity element, but it may happen that there are more
than one entity with the same ID (e.g. entities with same ID but different type). In those cases
an error mesage is returned, specifying in the description the URL that could be used to get
the list of conflicting entities, i.e. all the entities with such an ID.

Response:

* Successful operation uses 200 OK
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity Id.
    + attrs: temperature,humidity (optional, string) - Attributes to be retrieved. Coma separated list.

+ Response 200 (application/json)

        {
            "type": "Room",
            "id": "Bcn_Welt",
            "temperature": 21.7,
            "humidity": 60,
            "location": {
                "value":  "41.3763726, 2.1864475",
                "type": "geo:point",
                "crs": "WGS84"
            }
        }

### Update or append entity attributes [POST /v2/entities/{entityId}?{options}]

<table style="width: 100%; margin: 12px 0 0 0;">
<tr><td colspan="2"><strong>Required Parameters</strong></td></tr>
<tr><td colspan="2">none</td></tr>
<tr><td colspan="2"><strong>Optional Parameters</strong></td></tr>
<tr>
  <td style="padding-right: 40px; width: 140px;">op</td>
  <td>Operation options. Allowed values: <code>append</code>.</td>
</tr>
</table>

The request payload is an object representing the attributes to append or update. The object follows
the JSON entity representation format (described in a section above), except that `id` and `type`
are not allowed.

The entity attributes are updated with the ones in the payload. In particular, depending on
whether `append` option is used or not.

* If `append` is not used: the entity attributes are updated (if they previously exist) or appended
  (in they don't previously exists) with the ones in the payload.
* If `append` is used (i.e. strict append semantics): all the attributes in the payload not previously
  existing in the entity are appended. In addition to that, in the case some of the attributes in the
  payload already exist in the entity, an error if returned.

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + options: append (optional, string) - Strict append.

+ Request (application/json)

    + Body

            {
                "ambientNoise": 31.5
            }

+ Response 204

### Update existing entity attributes [PATCH /v2/entities/{entityId}]

The request payload is an object representing the attributes to update. The object follows
the JSON entity representation format (described in a section above), except that `id` and `type`
are not allowed.

The entity attributes are updated with the ones in the payload. In addition to that, if one or more
attributes in the payload doesn't exist in the entity, an error if returned.

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.


+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID

+ Request (application/json)

        {
            "temperature": 25.5,
            "seatsNumber": 6
        }

+ Response 204

### Replace all entity attributes [PUT /v2/entities/{entityId}]

The request payload is an object representing the new entity attributes. The object follows
the JSON entity representation format (described in a section above), except that `id` and `type`
are not allowed.

The attributes previously existing in the entity are removed and replaced by the ones in the
request.

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID

+ Request (application/json)

        {
            "temperature": 25.5,
            "seatsNumber": 6
        }

+ Response 204

### Remove entity atributes [DELETE /v2/entities/{entityId}]

Delete the entity.

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Boe_Idearium (required, string) - Entity ID

+ Response 204

<!--

## Entity by type and ID [/v2/entities/type/{entityType}/id/{entityId}{?attrs,options}]

### Retrieve entity [GET /v2/entities/type/{entityType}/id/{entityId}?{attrs}]

<table style="width: 100%; margin: 12px 0 0 0;">
<tr><td colspan="2"><strong>Required Parameters</strong></td></tr>
<tr><td colspan="2">none</td></tr>
<tr><td colspan="2"><strong>Optional Parameters</strong></td></tr>
<tr>
  <td style="padding-right: 40px; width: 140px;">attrs</td>
  <td>Comma-separated list of attribute names which data will be included in the response. If this parameter is not
  included, all the attributes are retrieved.</td>
</tr>
</table>

The response is an object representing the entity identified by the type and ID. The object
follows the JSON entity representation format (described in a section above).

This operation must return only one entity element, but it may happen that there are more
than one entity with the same ID and type (e.g. entities with same ID and type in different
service paths). In those cases  an error mesage is returned, specifying in the description the
URL that could be used to get the list of conflicting entities, i.e. all the entities with such type and ID.

Response:

* Successful operation uses 20O OK
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Boe_Idearium (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type
    + attrs: temperature, humidity (optional, string) - Attributes to be retrieved. Coma separated list.

+ Response 200 (application/json)

        {
            "type": "Room",
            "id": "Bcn_Welt",
            "temperature": 21.7,
            "humidity": 60,
            "location": {
                "value":  "41.3763726, 2.1864475",
                "type": "geo:point",
                "crs": "WGS84"
            }
        }

### Update or append entity attributes [POST /v2/entities/type/{entityType}/id/{entityId}?{options}]

<table style="width: 100%; margin: 12px 0 0 0;">
<tr><td colspan="2"><strong>Required Parameters</strong></td></tr>
<tr><td colspan="2">none</td></tr>
<tr><td colspan="2"><strong>Optional Parameters</strong></td></tr>
<tr>
  <td style="padding-right: 40px; width: 140px;">op</td>
  <td>Operation options. Allowed values: <code>append</code>.</td>
</tr>
</table>

The request payload is an object representing the attributes to append or update. The object follows
the JSON entity representation format (described in a section above), except that `id` and `type`
are not allowed.

The entity attributes are updated with the ones in the payload. In particular, depending on
whether `append` option is used:

* If `append` is not used: the entity attributes are updated (if they previously exist) or appended
  (in they don't previously exists) with the ones in the payload.
* If `append` is used (i.e. strict append semantics): all the attributes in the payload not previously
  existing in the entity are appended. In addition to that, in the case some of the attributes in the
  payload already exist in the entity, an error if returned.

Response:

* Successful operation uses 204 No Content.
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type
    + options: append (optional, string) - Strict append.

+ Request (application/json)

    + Body

            {
                "ambientNoise": 31.5
            }

+ Response 204

### Update existing entity attributes [PATCH /v2/entities/type/{entityType}/id/{entityId}]

The request payload is an object representing the attributes to update. The object follows
the JSON entity representation format (described in a section above), except that `id` and `type`
are not allowed.

The entity attributes are updated with the ones in the payload. In addition to that, if one or more
attributes in the payload doesn't exist in the entity, an error if returned.

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type

+ Request (application/json)

        {
            "temperature": 25.5,
            "seatsNumber": 6
        }

+ Response 204

### Replace all entity attributes [PUT /v2/entities/type/{entityType}/id/{entityId}]

The request payload is an object representing the new entity attributes. The object follows
the JSON entity representation format (described in a section above), except that `id` and `type`
are not allowed.

The attributes previously existing in the entity are removed and replaced by the ones in the
request.

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type

+ Request (application/json)

        {
            "temperature": 25.5,
            "seatsNumber": 6
        }

+ Response 204

### Remove entity attributes [DELETE /v2/entities/type/{entityType}/id/{entityId}?{attrs}]

Delete the entity.

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Boe_Idearium (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type

+ Response 204

-->

## Attribute by Entity ID [/v2/entities/{entityId}/attrs/{attrName}]

### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}]

Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes
(described in a section above).

Response:

* Successful operation uses 20O OK.
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute to be retrieved.

+ Response 200 (application/json)

        {
            "value": 21.7
        }

### Update attribute data [PUT /v2/entities/{entityId}/attrs/{attrName}]

The request payload is an object representing the new attributes data. Previous attribute data
is replaced by the one in the request. The object follows the JSON representation for attributes
(described in a section above).

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute name

+ Request (application/json)

        {
            "value": 25.0,
            "unitCode": "CEL"
        }

+ Response 200


### Remove a single attribute [DELETE /v2/entities/{entityId}/attrs/{attrName}]

Removes an entity attribute.

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute name

+ Response 204

<!--

## Attribute by Entity Type and ID [/v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]

### Get attribute data [GET /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]

Returns a JSON object with the attribute data of the attribute. The object follows the JSON representation for attributes
(described in a section above).

Response:

* Successful operation uses 20O OK.
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type
    + attrName: temperature (required, string) - Attribute to be retrieved.

+ Response 200 (application/json)

        {
            "value": 21.7
        }

### Update attribute data [PUT /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]

The request payload is an object representing the new attributes data. Previous attribute data is replaced
by the one in the request. The object follows the JSON representation for attributes
(described in a section above).

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type
    + attrName: temperature (required, string) - Attribute name

+ Request (application/json)

        {
            "value": 25.0,
            "unitCode": "CEL"
        }

+ Response 200


### Remove a single attribute [DELETE /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}]

Removes the attribute from the entity.

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type
    + attrName: temperature (required, string) - Attribute name

+ Response 204

-->

## Attribute Value by Entity ID [/v2/entities/{entityId}/attrs/{attrName}/value{?options}]

### Get attribute data [GET /v2/entities/{entityId}/attrs/{attrName}/value{?options}]

<table style="width: 100%; margin: 12px 0 0 0;">
<tr><td colspan="2"><strong>Required Parameters</strong></td></tr>
<tr><td colspan="2">none</td></tr>
<tr><td colspan="2"><strong>Optional Parameters</strong></td></tr>
<tr>
  <td style="padding-right: 40px; width: 140px;">options</td>
  <td>Operation opations. Allowed values: <code>text</code>.</td>
</tr>
</table>

It returns a JSON object with a `value` propierty with the value of the attribute. The `text` option
indicates that the attribute value must be provided as plain text (text/plain).

Response:

* Successful operation uses 20O OK.
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute to be retrieved.

+ Response 200 (application/json)

        {
            "value": 21.7
        }

### Update attribute value [PUT /v2/entities/{entityId}/attrs/{attrName}/value]

The request payload is the new attribute value. It can be represented as a JSON object (application/json),
with a `value` property, or as plain text (text/plain).

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + attrName: temperature (required, string) - Attribute name

+ Request (application/json)

        {
            "value": 25.0
        }

+ Response 200

<!--

## Attribute Value by Entity type and ID [/v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}/value{?options}]

### Get attribute data [GET /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}/value{?options}]

<table style="width: 100%; margin: 12px 0 0 0;">
<tr><td colspan="2"><strong>Required Parameters</strong></td></tr>
<tr><td colspan="2">none</td></tr>
<tr><td colspan="2"><strong>Optional Parameters</strong></td></tr>
<tr>
  <td style="padding-right: 40px; width: 140px;">options</td>
  <td>Operation opations. Allowed values: <code>text</code>.</td>
</tr>
</table>

If the `text` option is not used, returns a JSON object which the `value` of the attribute. If the
`text` option is used returns the attribute value in plain text.

Response:

* Successful operation uses 20O OK.
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type
    + attrName: temperature (required, string) - Attribute to be retrieved.

+ Response 200 (application/json)

        {
            "value": 21.7
        }

### Update attribute value [PUT /v2/entities/type/{entityType}/id/{entityId}/attrs/{attrName}/value]

The request payload is the new attribute value. It can be represented as a JSON object (application/json),
with a `value` property, or as plain text (text/plain).

Response:

* Successful operation uses 204 No Content
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityId: Bcn_Welt (required, string) - Entity ID
    + entityType: Room (required, string) - Entity Type
    + attrName: temperature (required, string) - Attribute name

+ Request (application/json)

        {
            "value": 25.0
        }

+ Response 200

-->

## Entity types [/v2/types{?limit,offset,options}]

### Retrieve entity types [GET /v2/types/{?limit,offset,options}]

<table style="width: 100%; margin: 12px 0 0 0;">
<tr><td colspan="2"><strong>Required Parameters</strong></td></tr>
<tr><td colspan="2">none</td></tr>
<tr><td colspan="2"><strong>Optional Parameters</strong></td></tr>
<tr><td style="padding-right: 40px; width: 140px;">limit</td><td>Limit the number of types to be retrieved</td></tr>
<tr><td style="padding-right: 40px; width: 140px;">offset</td><td>Skip a number of records</td></tr>
<tr><td style="padding-right: 40px; width: 140px;">options</td><td>
This operation supports two options:

<ul>
  <li><code>count</code>: when used, the total types number is returned as a HTTP in the
  response name <code>X-Total-Count</code>.</li>
  <li><code>values</code>: when used, the response payload is a JSON array with a
  list of entity types.</li>
</td></tr>
</table>

If `values` option is not use, the operation returns a JSON object which properties are entity types. The properties
value is a JSON object with information about the type: `attrs` (the union set of attribute names along all the entities
of such type) and `count` (the number of entities belonging to that type).

If `values` option is used, the operation returns a JSON array with the list of entity types names as strings.

Response code:

* Successful operation uses 200 OK
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + limit: 20 (optional, number)
    + offset: 20 (optional, number)

+ Response 200 (application/json)

        {
          "Car": {
            "attrs": {
              "speed": {
                "type": null
              },
              "fuel": {
                "type": "gasoline"
              },
              "fuel": {
                "type": "diesel"
              },
              "temperature": {
                "type": "urn:phenomenum:temperature"
              }
            },
            "count": 12
          },
          "Room": {
            "attrs": {
              "pressure": {
                "type": null
              },
              "hummidity": {
                "type": "percentage"
              },
              "temperature": {
                "type": "urn:phenomenum:temperature"
              }
            },
            "count": 7
          }
        }

## Entity type [/v2/type/{entityType}]

### Retrieve entity type [GET /v2/type/{entityType}]

The operation returns a JSON object with information about the type: `attrs` (the union set of attribute names along all
the entities of such type) and `count` (the number of entities belonging to that type).

Response code:

* Successful operation uses 200 OK
* Error use a non-200 and (optionally) an error payload. See subsection on Error Responses for more detail.

+ Parameters
    + entityType: Room (required, string) - Entity Type

+ Response 200 (application/json)

          {
            "attrs": {
              "pressure": {
                "type": null
              },
              "hummidity": {
                "type": "percentage"
              },
              "temperature": {
                "type": "urn:phenomenum:temperature"
              }
            },
            "count": 7
          }

## Context Subscriptions [/v2/entities/{entityId}/subscriptions]

A subscription is represented by a JSON object with the following fields:

* `id`: Subscription unique identifier. Automatically created at creation time.
* `subject` : It s an object that describes the subject of the subscription.
* `notification` : It is an object that describes the notification received by the subscriber.
* `options` : It is a dictionary which can contain different parameters related to the subscription, including:
  * `duration`: Duration of the subscription in ISO8601 format. Infinite if not specified.

A 'subject' contains the following subfields:

* `entity` : Id or pattern id which identifies the affected entities (optional)
* `type` : Type of the affected entities (optional)
* `attributes`: List of attributes to be monitored (if not specified it would mean all)
* `condition`: Condition that will trigger the notification. It could be 'ONCHANGE' or 'ONTIMEINTERVAL'.
By default will be ONCHANGE.
* `expression`: Logical the expression on attributes. When its evaluation results in a
`true` value the notification will be sent.

Entity or type must be present.

Please note that at the time of writing the editors are considering different options
to model these parameters, thus this is likely to change.

A 'notification' object contains the following subfields:

* `attributes`: List of attributes to be included in the notification message.
If not specified they will be the same as those which are monitored
* `callback` : URL that will point to the service which will be invoked when a notification is generated
* `throttling`: A period of time (in ISO8601 format) which must ellapse between two consecutive notifications.

### List subscriptions [GET /v2/subscriptions]

Returns a list of all the subscriptions present in the system

+ Response 200

        [
            {
                "id": "abcdefg",
                "subject": {
                    "entity": "Bcn_Welt",
                    "type": "Room",
                    "attributes": [
                        "temperature"
                    ],
                    "condition": "ONCHANGE"
                },
                "notification": {
                    "callback": "http://localhost:1234",
                    "attributes": ["temperature", "humidity"],
                    "throttling": "PT5S"
                },
                "options": {
                    "duration": "PT1M"
                }
            }
        ]

### Create a new subscription [POST /v2/subscriptions]

Creates a new subscription.
The subscription is represented by a JSON object as described at the beginning of this section.

+ Request (application/json)

        {
            "subject": {
                "type": "Room",
                "attributes": [
                      "humidity"
                ],
                "condition": "ONTIMEINTERVAL"
            },
            "notification": {
                "callback": "http://localhost:1234",
                "attributes": ["temperature", "humidity"],
                "throttling": "PT5S"
            },
            "options": {
                "duration": "PT1M"
            }
        }

+ Response 201

    + Headers

            Location: /v2/subscriptions/abcde98765

## Context Provider Registration [/v2/registrations]

Context Registration allows to associate external services to context data. One of the main
use cases of this functionality is the association of Context Providers.

A context registration is represented by a JSON object with the following fields:

* `id`: Unique identifier assigned to the registration. Automatically created at creation time.
* `subject` : It s an object that describes the subject of the registration.
* `callback` : URL of the service which is registered. In the case of a Context Provider
corresponds to the URL of the provider service.
* `options` : It is a dictionary which can contain different parameters related to the registration, namely:
  * `duration`: Duration of the registration in ISO8601 format. Default duration is infinite.

A `subject` contains the following subfields:

* `entity` : Id or pattern id which identifies the affected entities (optional).
* `type` : Type of the affected entities (optional).
* `attributes`: List of attributes to be provided (if not specified it would mean all).

Entity or type must be present.

### List registrations [GET /v2/registrations]

Lists all the registrations present in the system.

+ Response 200

        [
            {
                "id": "abcdefg",
                "subject": {
                    "entity": "Bcn_Welt",
                    "type": "Room",
                    "attributes": [
                        "temperature"
                    ]
                },
                "callback": "http://localhost:1234",
                "options": {
                    "duration": "PT1M"
                }
            }
        ]

### Context provider registration [POST /v2/registrations]

Creates a new registration. This is typically used for associating context providers
to certain data.
The registration is represented by a JSON object as described at the beginning of this section.

+ Request (application/json)

        {
            "subject": {
                "type": "Room",
                "attributes": [
                      "humidity"
                ]
            },
            "callback":  "http://localhost:1234",
            "options": {
                "duration": "PT1M"
            }
        }

+ Response 201

    + Headers

            Location: /v2/registrations/abcde98765


## OMA-NGSI Operations [/v2/queryContext]

For the sake of completness here is an enumeration of the OMA-NGSI (9 & 10) operations. Those
operations will be supported under the 'v2' resource as well.

### queryContext [POST /v2/queryContext]

### updateContext [POST /v2/updateContext]

### subscribeContext [POST /v2/subscribeContext]

### updateContextSubscription [POST /v2/updateContextSubscription]

### unsubscribeContext [POST /v2/unsubscribeContext]

### notifyContext [POST /v2/notifyContext]

### registerContext [POST /v2/registerContext]

### discoverContextAvailability [POST /v2/discoverContextAvailability]

### subscribeContextAvailability [POST /v2/subscribeContextAvailability]

### updateContextAvailabilitySubscription [POST /v2/updateContextAvailabilitySubscription]

### unsubscribeContextAvailability [POST /v2/unsubscribeContextAvailability]

### notifyContextAvailability [POST /v2/notifyContextAvailability]
